'use client';

import { ChevronDown, Sparkles } from 'lucide-react';
import { useEffect, useMemo, useState } from 'react';
import styles from './Hero.module.css';

export default function Hero() {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [scrollProgress, setScrollProgress] = useState(0);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–∏—Ü
  const particles = useMemo(() => {
    const randomValues = [
      { left: 12, delay: 0.5, duration: 15 },
      { left: 45, delay: 1.2, duration: 18 },
      { left: 78, delay: 0.8, duration: 22 },
      { left: 23, delay: 1.8, duration: 14 },
      { left: 67, delay: 0.3, duration: 20 },
      { left: 34, delay: 1.5, duration: 16 },
      { left: 89, delay: 0.7, duration: 19 },
      { left: 15, delay: 1.1, duration: 17 },
      { left: 56, delay: 1.9, duration: 13 },
      { left: 92, delay: 0.4, duration: 21 },
      { left: 28, delay: 1.3, duration: 15 },
      { left: 71, delay: 0.9, duration: 18 },
      { left: 41, delay: 1.6, duration: 20 },
      { left: 84, delay: 0.6, duration: 14 },
      { left: 19, delay: 1.4, duration: 22 },
      { left: 63, delay: 1.0, duration: 16 },
      { left: 37, delay: 1.7, duration: 19 },
      { left: 76, delay: 0.2, duration: 17 },
      { left: 52, delay: 1.8, duration: 21 },
      { left: 95, delay: 0.8, duration: 13 },
    ];
    return randomValues;
  }, []);

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      const { clientX, clientY } = e;
      const x = (clientX / window.innerWidth) * 100;
      const y = (clientY / window.innerHeight) * 100;
      setMousePosition({ x, y });
    };

    const handleScroll = () => {
      const windowHeight = window.innerHeight;
      const scrollY = window.scrollY;
      const progress = Math.min((scrollY / windowHeight) * 100, 100);
      setScrollProgress(progress);
    };

    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('scroll', handleScroll);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  const handleScrollDown = () => {
    window.scrollTo({
      top: window.innerHeight,
      behavior: 'smooth',
    });
  };

  const handleTelegramLink = () => {
    window.open('https://t.me/lunessence_parfums_bot', '_blank');
  };

  return (
    <section id="hero" className={styles.hero}>
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å—Ç–µ–∫–ª–∞ */}
      <div className={styles.glassEffect}>
        <div
          className={styles.mouseLight}
          style={{
            background: `radial-gradient(circle at ${mousePosition.x}% ${mousePosition.y}%, rgba(212, 175, 55, 0.15) 0%, transparent 50%)`,
          }}
        />
      </div>

      {/* –ü–ª–∞–≤–∞—é—â–∏–µ —á–∞—Å—Ç–∏—Ü—ã */}
      <div className={styles.particles}>
        {particles.map((particle, i) => (
          <div
            key={i}
            className={styles.particle}
            style={{
              left: `${particle.left}%`,
              animationDelay: `${particle.delay}s`,
              animationDuration: `${particle.duration}s`,
            }}
          />
        ))}
      </div>

      {/* –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π */}
      <div className={styles.gradientOverlay} />

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className={styles.content}>
        {/* –í–µ—Ä—Ö–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∑–æ–ª–æ—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º */}
        <div className={styles.topElements}>
          <div className={styles.badge}>
            <Sparkles size={16} />
            <span>Premium Collection</span>
          </div>
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        <div className={styles.mainContent}>
          <div className={styles.titleWrapper}>
            <h1 className={styles.mainTitle}>
              <span className={styles.titleLine}>–≠–º–æ—Ü–∏—è</span>
              <span className={styles.titleLine}>–í –ö–∞–∂–¥–æ–º</span>
              <span className={styles.titleAccent}>–ê—Ä–æ–º–∞—Ç–µ</span>
            </h1>
          </div>

          <p className={styles.subtitle}>
            –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤. –¢–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤ –æ–¥–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
          </p>

          {/* CTA –∫–Ω–æ–ø–∫–∏ */}
          <div className={styles.ctaButtons}>
            <button className={styles.primaryButton} onClick={handleTelegramLink}>
              <span>–û—Ç–∫—Ä—ã—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é</span>
              <div className={styles.buttonGlow} />
            </button>
            <button className={styles.secondaryButton} onClick={handleScrollDown}>
              –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
            </button>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className={styles.stats}>
            <div className={styles.statItem}>
              <div className={styles.statNumber}>10–ö+</div>
              <div className={styles.statLabel}>–ê—Ä–æ–º–∞—Ç–æ–≤</div>
            </div>
            <div className={styles.statDivider} />
            <div className={styles.statItem}>
              <div className={styles.statIcon}>üöö</div>
              <div className={styles.statLabel}>–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏</div>
            </div>
            <div className={styles.statDivider} />
            <div className={styles.statItem}>
              <div className={styles.statNumber}>100+</div>
              <div className={styles.statLabel}>–ë—Ä–µ–Ω–¥–æ–≤</div>
            </div>
          </div>
        </div>

        {/* –ù–∏–∂–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫—Ä–æ–ª–ª–∞ */}
        <div className={styles.bottomElement}>
          <button className={styles.scrollButton} onClick={handleScrollDown}>
            <ChevronDown size={24} />
            <span>–õ–∏—Å—Ç–∞–π—Ç–µ –≤–Ω–∏–∑</span>
          </button>
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫—Ä–æ–ª–ª–∞ */}
      <div className={styles.scrollProgress}>
        <div className={styles.scrollProgressBar} style={{ width: `${scrollProgress}%` }} />
      </div>
    </section>
  );
}
